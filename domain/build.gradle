apply plugin: 'kotlin'
apply plugin: 'kotlin-allopen'
apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.2'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
    }
}

allOpen {
    annotation 'com.deividasstr.domain.utils.OpenClass'
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
    test.java.srcDirs += 'src/test/kotlin'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"

    implementation "com.jakewharton.threetenabp:threetenabp:$threeTenAndroidVersion"

    // Tests
    testImplementation "junit:junit:$jUnitVersion"
    testImplementation 'org.amshove.kluent:kluent-android:1.45'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:' + mockitoKotlinVersion
    testImplementation "org.mockito:mockito-inline:$mockitoAndroidVersion"
    testImplementation "org.threeten:threetenbp:$threeTenJavaVersion"
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
}

check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}

// For test data to be available in other modules
task jarTest(type: Jar) {
    from sourceSets.test.output
    classifier = 'test'
}
configurations {
    testOutput
    artifacts {
        testOutput jarTest
    }
}

task jacocoUnitTestReport(type: JacocoReport, dependsOn: ['test']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    def coverageSourceDirs = ["src/main/kotlin"]

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*'
    ]

    def kotlinClasses = fileTree(
            dir: "$buildDir/classes/kotlin",
            excludes: fileFilter
    )

    classDirectories = files([kotlinClasses])
    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/test.exec"
    ])

    reports {
        xml.enabled = true
        html.enabled = true
    }
}